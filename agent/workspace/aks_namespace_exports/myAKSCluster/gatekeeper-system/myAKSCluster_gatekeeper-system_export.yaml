apiVersion: v1
items:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","control-plane":"controller-manager","gatekeeper.sh/operation":"audit","gatekeeper.sh/system":"yes","kubernetes.azure.com/managedby":"aks"},"name":"gatekeeper-audit","namespace":"gatekeeper-system"},"spec":{"paused":false,"replicas":1,"revisionHistoryLimit":2,"selector":{"matchLabels":{"control-plane":"audit-controller","gatekeeper.sh/operation":"audit","gatekeeper.sh/system":"yes"}},"template":{"metadata":{"annotations":{"aks.component/sig":"azure-policy","cluster-autoscaler.kubernetes.io/safe-to-evict":"true"},"labels":{"control-plane":"audit-controller","gatekeeper.sh/operation":"audit","gatekeeper.sh/system":"yes","kubernetes.azure.com/managedby":"aks"}},"spec":{"affinity":{"nodeAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"preference":{"matchExpressions":[{"key":"kubernetes.azure.com/mode","operator":"In","values":["system"]}]},"weight":100}],"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchExpressions":[{"key":"kubernetes.azure.com/cluster","operator":"Exists"},{"key":"type","operator":"NotIn","values":["virtual-kubelet"]},{"key":"kubernetes.io/os","operator":"In","values":["linux"]}]}]}},"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchExpressions":[{"key":"gatekeeper.sh/operation","operator":"In","values":["webhook"]}]},"topologyKey":"kubernetes.io/hostname"},"weight":100}]}},"automountServiceAccountToken":true,"containers":[{"args":["--logtostderr","--audit-interval=600","--constraint-violations-limit=500","--audit-from-cache=false","--audit-match-kind-only=true","--operation=audit","--operation=status","--operation=mutation-status","--operation=generate","--disable-cert-rotation","--disable-opa-builtin={http.send}","--enable-external-data=true","--audit-events-involved-namespace=false","--enable-generator-resource-expansion=true","--enable-violation-export=false","--default-wait-for-vapb-generation=30","--enable-k8s-native-validation=true","--default-create-vap-for-templates=false","--default-create-vap-binding-for-constraints=false"],"command":["/manager"],"env":[{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}},{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"NAMESPACE","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}},{"name":"CONTAINER_NAME","value":"gatekeeper-audit-container"},{"name":"OTEL_RESOURCE_ATTRIBUTES","value":"k8s.pod.name=$(POD_NAME),k8s.namespace.name=$(NAMESPACE),k8s.container.name=$(CONTAINER_NAME)"}],"image":"mcr.microsoft.com/oss/v2/open-policy-agent/gatekeeper:v3.19.1-1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/healthz","port":9090}},"name":"gatekeeper-audit-container","ports":[{"containerPort":8888,"name":"metrics","protocol":"TCP"},{"containerPort":9090,"name":"healthz","protocol":"TCP"}],"readinessProbe":{"httpGet":{"path":"/readyz","port":9090}},"resources":{"limits":{"cpu":"2000m","memory":"3072Mi"},"requests":{"cpu":"100m","memory":"256Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsGroup":999,"runAsNonRoot":true,"runAsUser":1000,"seccompProfile":{"type":"RuntimeDefault"}},"volumeMounts":[{"mountPath":"/tmp/audit","name":"tmp-volume"},{"mountPath":"/certs","name":"cert","readOnly":true}]}],"priorityClassName":"system-node-critical","serviceAccountName":"gatekeeper-admin","terminationGracePeriodSeconds":60,"tolerations":[{"key":"CriticalAddonsOnly","operator":"Exists"}],"volumes":[{"emptyDir":{},"name":"tmp-volume"},{"name":"cert","secret":{"defaultMode":420,"secretName":"gatekeeper-webhook-server-cert"}}]}}}}
    creationTimestamp: "2025-05-28T04:59:02Z"
    generation: 2
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      control-plane: controller-manager
      gatekeeper.sh/operation: audit
      gatekeeper.sh/system: "yes"
      kubernetes.azure.com/managedby: aks
    name: gatekeeper-audit
    namespace: gatekeeper-system
    resourceVersion: "22319707"
    uid: 00408e93-2c30-4566-9dab-660ce7d1bbb5
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 2
    selector:
      matchLabels:
        control-plane: audit-controller
        gatekeeper.sh/operation: audit
        gatekeeper.sh/system: "yes"
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          aks.component/sig: azure-policy
          cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        creationTimestamp: null
        labels:
          control-plane: audit-controller
          gatekeeper.sh/operation: audit
          gatekeeper.sh/system: "yes"
          kubernetes.azure.com/managedby: aks
      spec:
        affinity:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                - key: kubernetes.azure.com/mode
                  operator: In
                  values:
                  - system
              weight: 100
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.azure.com/cluster
                  operator: Exists
                - key: type
                  operator: NotIn
                  values:
                  - virtual-kubelet
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: gatekeeper.sh/operation
                    operator: In
                    values:
                    - webhook
                topologyKey: kubernetes.io/hostname
              weight: 100
        automountServiceAccountToken: true
        containers:
        - args:
          - --logtostderr
          - --audit-interval=600
          - --constraint-violations-limit=500
          - --audit-from-cache=false
          - --audit-match-kind-only=true
          - --operation=audit
          - --operation=status
          - --operation=mutation-status
          - --operation=generate
          - --disable-cert-rotation
          - --disable-opa-builtin={http.send}
          - --enable-external-data=true
          - --audit-events-involved-namespace=false
          - --enable-generator-resource-expansion=true
          - --enable-violation-export=false
          - --default-wait-for-vapb-generation=30
          - --enable-k8s-native-validation=true
          - --default-create-vap-for-templates=false
          - --default-create-vap-binding-for-constraints=false
          command:
          - /manager
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CONTAINER_NAME
            value: gatekeeper-audit-container
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: k8s.pod.name=$(POD_NAME),k8s.namespace.name=$(NAMESPACE),k8s.container.name=$(CONTAINER_NAME)
          image: mcr.microsoft.com/oss/v2/open-policy-agent/gatekeeper:v3.19.1-1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 9090
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: gatekeeper-audit-container
          ports:
          - containerPort: 8888
            name: metrics
            protocol: TCP
          - containerPort: 9090
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 9090
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 3Gi
            requests:
              cpu: 100m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 999
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp/audit
            name: tmp-volume
          - mountPath: /certs
            name: cert
            readOnly: true
        dnsPolicy: ClusterFirst
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: gatekeeper-admin
        serviceAccountName: gatekeeper-admin
        terminationGracePeriodSeconds: 60
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - emptyDir: {}
          name: tmp-volume
        - name: cert
          secret:
            defaultMode: 420
            secretName: gatekeeper-webhook-server-cert
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-05-28T04:59:02Z"
      lastUpdateTime: "2025-05-30T09:08:10Z"
      message: ReplicaSet "gatekeeper-audit-6c74dbb7b6" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-07-22T02:04:55Z"
      lastUpdateTime: "2025-07-22T02:04:55Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","control-plane":"controller-manager","gatekeeper.sh/operation":"webhook","gatekeeper.sh/system":"yes","kubernetes.azure.com/managedby":"aks"},"name":"gatekeeper-controller","namespace":"gatekeeper-system"},"spec":{"paused":false,"replicas":2,"revisionHistoryLimit":2,"selector":{"matchLabels":{"control-plane":"controller-manager","gatekeeper.sh/operation":"webhook","gatekeeper.sh/system":"yes"}},"template":{"metadata":{"annotations":{"aks.component/sig":"azure-policy","cluster-autoscaler.kubernetes.io/safe-to-evict":"true"},"labels":{"control-plane":"controller-manager","gatekeeper.sh/operation":"webhook","gatekeeper.sh/system":"yes","kubernetes.azure.com/managedby":"aks"}},"spec":{"affinity":{"nodeAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"preference":{"matchExpressions":[{"key":"kubernetes.azure.com/mode","operator":"In","values":["system"]}]},"weight":100}],"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchExpressions":[{"key":"kubernetes.azure.com/cluster","operator":"Exists"},{"key":"type","operator":"NotIn","values":["virtual-kubelet"]},{"key":"kubernetes.io/os","operator":"In","values":["linux"]}]}]}},"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchExpressions":[{"key":"gatekeeper.sh/operation","operator":"In","values":["webhook","audit"]}]},"topologyKey":"kubernetes.io/hostname"},"weight":100}]}},"automountServiceAccountToken":true,"containers":[{"args":["--port=8443","--log-denies","--logtostderr","--operation=webhook","--operation=mutation-webhook","--log-mutations","--mutation-annotations","--disable-cert-rotation","--tls-min-version=1.3","--disable-opa-builtin={http.send}","--enable-external-data=true","--admission-events-involved-namespace=false","--enable-generator-resource-expansion=true","--default-wait-for-vapb-generation=30","--enable-k8s-native-validation=true","--default-create-vap-for-templates=false","--default-create-vap-binding-for-constraints=false"],"command":["/manager"],"env":[{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}},{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"NAMESPACE","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}},{"name":"CONTAINER_NAME","value":"gatekeeper-controller-container"},{"name":"OTEL_RESOURCE_ATTRIBUTES","value":"k8s.pod.name=$(POD_NAME),k8s.namespace.name=$(NAMESPACE),k8s.container.name=$(CONTAINER_NAME)"}],"image":"mcr.microsoft.com/oss/v2/open-policy-agent/gatekeeper:v3.19.1-1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/healthz","port":9090}},"name":"gatekeeper-controller-container","ports":[{"containerPort":8443,"name":"webhook-server","protocol":"TCP"},{"containerPort":8888,"name":"metrics","protocol":"TCP"},{"containerPort":9090,"name":"healthz","protocol":"TCP"}],"readinessProbe":{"httpGet":{"path":"/readyz","port":9090}},"resources":{"limits":{"cpu":"2000m","memory":"2048Mi"},"requests":{"cpu":"100m","memory":"256Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsGroup":999,"runAsNonRoot":true,"runAsUser":1000,"seccompProfile":{"type":"RuntimeDefault"}},"volumeMounts":[{"mountPath":"/certs","name":"cert","readOnly":true}]}],"priorityClassName":"system-node-critical","serviceAccountName":"gatekeeper-admin","terminationGracePeriodSeconds":60,"tolerations":[{"key":"CriticalAddonsOnly","operator":"Exists"}],"volumes":[{"name":"cert","secret":{"defaultMode":420,"secretName":"gatekeeper-webhook-server-cert"}}]}}}}
    creationTimestamp: "2025-05-28T04:59:02Z"
    generation: 2
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      control-plane: controller-manager
      gatekeeper.sh/operation: webhook
      gatekeeper.sh/system: "yes"
      kubernetes.azure.com/managedby: aks
    name: gatekeeper-controller
    namespace: gatekeeper-system
    resourceVersion: "24533012"
    uid: aa8152fe-76c2-4520-a6b1-880fcf35a2c8
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 2
    selector:
      matchLabels:
        control-plane: controller-manager
        gatekeeper.sh/operation: webhook
        gatekeeper.sh/system: "yes"
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          aks.component/sig: azure-policy
          cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        creationTimestamp: null
        labels:
          control-plane: controller-manager
          gatekeeper.sh/operation: webhook
          gatekeeper.sh/system: "yes"
          kubernetes.azure.com/managedby: aks
      spec:
        affinity:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                - key: kubernetes.azure.com/mode
                  operator: In
                  values:
                  - system
              weight: 100
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.azure.com/cluster
                  operator: Exists
                - key: type
                  operator: NotIn
                  values:
                  - virtual-kubelet
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: gatekeeper.sh/operation
                    operator: In
                    values:
                    - webhook
                    - audit
                topologyKey: kubernetes.io/hostname
              weight: 100
        automountServiceAccountToken: true
        containers:
        - args:
          - --port=8443
          - --log-denies
          - --logtostderr
          - --operation=webhook
          - --operation=mutation-webhook
          - --log-mutations
          - --mutation-annotations
          - --disable-cert-rotation
          - --tls-min-version=1.3
          - --disable-opa-builtin={http.send}
          - --enable-external-data=true
          - --admission-events-involved-namespace=false
          - --enable-generator-resource-expansion=true
          - --default-wait-for-vapb-generation=30
          - --enable-k8s-native-validation=true
          - --default-create-vap-for-templates=false
          - --default-create-vap-binding-for-constraints=false
          command:
          - /manager
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CONTAINER_NAME
            value: gatekeeper-controller-container
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: k8s.pod.name=$(POD_NAME),k8s.namespace.name=$(NAMESPACE),k8s.container.name=$(CONTAINER_NAME)
          image: mcr.microsoft.com/oss/v2/open-policy-agent/gatekeeper:v3.19.1-1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 9090
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: gatekeeper-controller-container
          ports:
          - containerPort: 8443
            name: webhook-server
            protocol: TCP
          - containerPort: 8888
            name: metrics
            protocol: TCP
          - containerPort: 9090
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 9090
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 2Gi
            requests:
              cpu: 100m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 999
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /certs
            name: cert
            readOnly: true
        dnsPolicy: ClusterFirst
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: gatekeeper-admin
        serviceAccountName: gatekeeper-admin
        terminationGracePeriodSeconds: 60
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - name: cert
          secret:
            defaultMode: 420
            secretName: gatekeeper-webhook-server-cert
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2025-05-28T04:59:02Z"
      lastUpdateTime: "2025-05-30T09:08:51Z"
      message: ReplicaSet "gatekeeper-controller-6d4cc8855" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-07-27T03:38:24Z"
      lastUpdateTime: "2025-07-27T03:38:24Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"addonmanager.kubernetes.io/mode":"Reconcile","gatekeeper.sh/system":"yes"},"name":"gatekeeper-webhook-service","namespace":"gatekeeper-system"},"spec":{"ports":[{"name":"https-webhook-server","port":443,"targetPort":"webhook-server"}],"selector":{"control-plane":"controller-manager","gatekeeper.sh/operation":"webhook","gatekeeper.sh/system":"yes"}}}
    creationTimestamp: "2025-05-28T04:59:01Z"
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      gatekeeper.sh/system: "yes"
    name: gatekeeper-webhook-service
    namespace: gatekeeper-system
    resourceVersion: "3976"
    uid: 162b1571-a26e-4268-8aa5-d897da562688
  spec:
    clusterIP: 10.0.92.193
    clusterIPs:
    - 10.0.92.193
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https-webhook-server
      port: 443
      protocol: TCP
      targetPort: webhook-server
    selector:
      control-plane: controller-manager
      gatekeeper.sh/operation: webhook
      gatekeeper.sh/system: "yes"
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
kind: List
metadata:
  resourceVersion: ""
